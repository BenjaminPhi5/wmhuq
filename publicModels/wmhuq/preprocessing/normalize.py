import torch

means_flair = {2: 0.48520922660827637,
 3: 0.1670738309621811,
 4: -1.5000227689743042,
 5: 0.1123071163892746,
 7: 0.7046942114830017,
 8: 0.32005396485328674,
 10: 0.5354285836219788,
 11: 0.6784520149230957,
 12: 0.47996941208839417,
 13: -0.040809571743011475,
 14: -0.7859303951263428,
 15: -0.07498994469642639,
 16: 0.6230107545852661,
 17: 0.7953453660011292,
 18: 1.114068865776062,
 24: -0.9589323401451111,
 26: 1.0794391632080078,
 28: 0.41866815090179443,
 41: 0.4606130123138428,
 42: 0.13577422499656677,
 43: -1.5066311359405518,
 44: 0.0747605711221695,
 46: 0.6767604351043701,
 47: 0.29284578561782837,
 49: 0.5181968808174133,
 50: 0.7024816870689392,
 51: 0.45195654034614563,
 52: -0.07335970550775528,
 53: 0.7791181802749634,
 54: 1.1065770387649536,
 58: 1.077631950378418,
 60: 0.40572389960289}

stds_flair = {2: 0.5134040117263794,
 3: 0.7022711038589478,
 4: 1.117807149887085,
 5: 0.7999550700187683,
 7: 0.36298444867134094,
 8: 0.7230184078216553,
 10: 0.49715656042099,
 11: 0.8330866098403931,
 12: 0.3775533437728882,
 13: 0.304894357919693,
 14: 0.9711259603500366,
 15: 1.052953839302063,
 16: 0.5495818257331848,
 17: 0.6167780756950378,
 18: 0.5138449668884277,
 24: 1.0131908655166626,
 26: 0.537002444267273,
 28: 0.6023667454719543,
 41: 0.5169063806533813,
 42: 0.7059783935546875,
 43: 1.1275343894958496,
 44: 0.8029075860977173,
 46: 0.35956433415412903,
 47: 0.7054727077484131,
 49: 0.4935833811759949,
 50: 0.8363298177719116,
 51: 0.38084277510643005,
 52: 0.300230473279953,
 53: 0.6192904114723206,
 54: 0.5097531676292419,
 58: 0.5432606339454651,
 60: 0.6020750999450684}

means_t1 = {2: 0.9259228110313416,
 3: -0.09983012825250626,
 4: -1.5618113279342651,
 5: -0.575668215751648,
 7: 0.7374824285507202,
 8: -0.11871735751628876,
 10: 0.2916332483291626,
 11: -0.14796078205108643,
 12: 0.26013892889022827,
 13: 0.7720674276351929,
 14: -1.6100043058395386,
 15: -1.321497917175293,
 16: 0.5462302565574646,
 17: -0.2413436323404312,
 18: -0.10997988283634186,
 24: -1.0028830766677856,
 26: -0.00023759555188007653,
 28: 0.6368318796157837,
 41: 0.9320405721664429,
 42: -0.08969280123710632,
 43: -1.5557829141616821,
 44: -0.5998438000679016,
 46: 0.7506285309791565,
 47: -0.1045738235116005,
 49: 0.2880151867866516,
 50: -0.13854661583900452,
 51: 0.2650313377380371,
 52: 0.7825866937637329,
 53: -0.23682786524295807,
 54: -0.10435381531715393,
 58: 0.010391950607299805,
 60: 0.6443564891815186}

stds_t1 = {2: 0.49017804861068726,
 3: 0.656367301940918,
 4: 0.654186487197876,
 5: 0.705183744430542,
 7: 0.4283124804496765,
 8: 0.5252209901809692,
 10: 0.43425193428993225,
 11: 0.49891167879104614,
 12: 0.2826326787471771,
 13: 0.26089993119239807,
 14: 0.49206891655921936,
 15: 0.6215071678161621,
 16: 0.4654093384742737,
 17: 0.4442543387413025,
 18: 0.35558032989501953,
 24: 0.7289170622825623,
 26: 0.3587343692779541,
 28: 0.5089055895805359,
 41: 0.4920906126499176,
 42: 0.6572408080101013,
 43: 0.6599986553192139,
 44: 0.7106191515922546,
 46: 0.42849859595298767,
 47: 0.5217318534851074,
 49: 0.4398858845233917,
 50: 0.5015531182289124,
 51: 0.2836116850376129,
 52: 0.262891560792923,
 53: 0.45125842094421387,
 54: 0.3544427454471588,
 58: 0.3668217062950134,
 60: 0.5098637342453003}

def renormalize_brain(image, synthseg, imgtype):
    renormed_image = image.clone()

    for anat in synthseg.unique():
        ai = anat.item()
        if anat == 0:
            continue

        voxels = image[synthseg == ai]
        
        if imgtype=='flair':
            renormed_image[synthseg == ai] = ((voxels - voxels.mean()) / voxels.std()) * stds_flair[ai] + means_flair[ai]
    
        elif imgtype=='t1':
            renormed_image[synthseg == ai] = ((voxels - voxels.mean()) / voxels.std()) * stds_t1[ai] + means_t1[ai]

    return renormed_image

def normalize_brain(image, mask, lower_percentile=0, upper_percentile=100, verbose=False):
    """
    function to normalize the brain within the mask area
    """
    
    # image = image.copy()
    mask = (mask==1)
    brain_locs = image[mask]
    
    if lower_percentile > 0 or upper_percentile < 100:
        if verbose:
            print("normalizing with percentiles: ", lower_percentile, upper_percentile)
        
        lower_percentile /= 100
        upper_percentile /= 100
        
        brain_locs = brain_locs.flatten()
        sorted_indices = torch.argsort(brain_locs)
        num_brain_voxels = len(sorted_indices)

        lower_index = int(lower_percentile*num_brain_voxels)
        upper_index = int(upper_percentile*num_brain_voxels)

        retained_indices = sorted_indices[lower_index:upper_index]
        
        brain_locs = brain_locs[lower_index:upper_index]
    else:
        if verbose:
            print("no percentiles used for normalization")

    mean = brain_locs.mean()
    std = brain_locs.std()

    image[mask] = (image[mask] - mean) / std

    return image
